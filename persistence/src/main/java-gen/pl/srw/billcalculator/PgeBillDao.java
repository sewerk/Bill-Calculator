package pl.srw.billcalculator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pl.srw.billcalculator.PgeBill;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PGE_BILL.
*/
public class PgeBillDao extends AbstractDao<PgeBill, Long> {

    public static final String TABLENAME = "PGE_BILL";

    /**
     * Properties of entity PgeBill.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ReadingFrom = new Property(1, Integer.class, "readingFrom", false, "READING_FROM");
        public final static Property ReadingTo = new Property(2, Integer.class, "readingTo", false, "READING_TO");
        public final static Property ReadingDayFrom = new Property(3, Integer.class, "readingDayFrom", false, "READING_DAY_FROM");
        public final static Property ReadingDayTo = new Property(4, Integer.class, "readingDayTo", false, "READING_DAY_TO");
        public final static Property ReadingNightFrom = new Property(5, Integer.class, "readingNightFrom", false, "READING_NIGHT_FROM");
        public final static Property ReadingNightTo = new Property(6, Integer.class, "readingNightTo", false, "READING_NIGHT_TO");
        public final static Property DateFrom = new Property(7, java.util.Date.class, "dateFrom", false, "DATE_FROM");
        public final static Property DateTo = new Property(8, java.util.Date.class, "dateTo", false, "DATE_TO");
        public final static Property CenaZaEnergieCzynna = new Property(9, String.class, "cenaZaEnergieCzynna", false, "CENA_ZA_ENERGIE_CZYNNA");
        public final static Property CenaSkladnikJakosciowy = new Property(10, String.class, "cenaSkladnikJakosciowy", false, "CENA_SKLADNIK_JAKOSCIOWY");
        public final static Property CenaOplataSieciowa = new Property(11, String.class, "cenaOplataSieciowa", false, "CENA_OPLATA_SIECIOWA");
        public final static Property CenaOplataPrzejsciowa = new Property(12, String.class, "cenaOplataPrzejsciowa", false, "CENA_OPLATA_PRZEJSCIOWA");
        public final static Property CenaOplStalaZaPrzesyl = new Property(13, String.class, "cenaOplStalaZaPrzesyl", false, "CENA_OPL_STALA_ZA_PRZESYL");
        public final static Property CenaOplataAbonamentowa = new Property(14, String.class, "cenaOplataAbonamentowa", false, "CENA_OPLATA_ABONAMENTOWA");
        public final static Property CenaZaEnergieCzynnaDzien = new Property(15, String.class, "cenaZaEnergieCzynnaDzien", false, "CENA_ZA_ENERGIE_CZYNNA_DZIEN");
        public final static Property CenaZaEnergieCzynnaNoc = new Property(16, String.class, "cenaZaEnergieCzynnaNoc", false, "CENA_ZA_ENERGIE_CZYNNA_NOC");
        public final static Property CenaOplataSieciowaDzien = new Property(17, String.class, "cenaOplataSieciowaDzien", false, "CENA_OPLATA_SIECIOWA_DZIEN");
        public final static Property CenaOplataSieciowaNoc = new Property(18, String.class, "cenaOplataSieciowaNoc", false, "CENA_OPLATA_SIECIOWA_NOC");
    };


    public PgeBillDao(DaoConfig config) {
        super(config);
    }
    
    public PgeBillDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PGE_BILL' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'READING_FROM' INTEGER," + // 1: readingFrom
                "'READING_TO' INTEGER," + // 2: readingTo
                "'READING_DAY_FROM' INTEGER," + // 3: readingDayFrom
                "'READING_DAY_TO' INTEGER," + // 4: readingDayTo
                "'READING_NIGHT_FROM' INTEGER," + // 5: readingNightFrom
                "'READING_NIGHT_TO' INTEGER," + // 6: readingNightTo
                "'DATE_FROM' INTEGER," + // 7: dateFrom
                "'DATE_TO' INTEGER," + // 8: dateTo
                "'CENA_ZA_ENERGIE_CZYNNA' TEXT," + // 9: cenaZaEnergieCzynna
                "'CENA_SKLADNIK_JAKOSCIOWY' TEXT," + // 10: cenaSkladnikJakosciowy
                "'CENA_OPLATA_SIECIOWA' TEXT," + // 11: cenaOplataSieciowa
                "'CENA_OPLATA_PRZEJSCIOWA' TEXT," + // 12: cenaOplataPrzejsciowa
                "'CENA_OPL_STALA_ZA_PRZESYL' TEXT," + // 13: cenaOplStalaZaPrzesyl
                "'CENA_OPLATA_ABONAMENTOWA' TEXT," + // 14: cenaOplataAbonamentowa
                "'CENA_ZA_ENERGIE_CZYNNA_DZIEN' TEXT," + // 15: cenaZaEnergieCzynnaDzien
                "'CENA_ZA_ENERGIE_CZYNNA_NOC' TEXT," + // 16: cenaZaEnergieCzynnaNoc
                "'CENA_OPLATA_SIECIOWA_DZIEN' TEXT," + // 17: cenaOplataSieciowaDzien
                "'CENA_OPLATA_SIECIOWA_NOC' TEXT);"); // 18: cenaOplataSieciowaNoc
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PGE_BILL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PgeBill entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer readingFrom = entity.getReadingFrom();
        if (readingFrom != null) {
            stmt.bindLong(2, readingFrom);
        }
 
        Integer readingTo = entity.getReadingTo();
        if (readingTo != null) {
            stmt.bindLong(3, readingTo);
        }
 
        Integer readingDayFrom = entity.getReadingDayFrom();
        if (readingDayFrom != null) {
            stmt.bindLong(4, readingDayFrom);
        }
 
        Integer readingDayTo = entity.getReadingDayTo();
        if (readingDayTo != null) {
            stmt.bindLong(5, readingDayTo);
        }
 
        Integer readingNightFrom = entity.getReadingNightFrom();
        if (readingNightFrom != null) {
            stmt.bindLong(6, readingNightFrom);
        }
 
        Integer readingNightTo = entity.getReadingNightTo();
        if (readingNightTo != null) {
            stmt.bindLong(7, readingNightTo);
        }
 
        java.util.Date dateFrom = entity.getDateFrom();
        if (dateFrom != null) {
            stmt.bindLong(8, dateFrom.getTime());
        }
 
        java.util.Date dateTo = entity.getDateTo();
        if (dateTo != null) {
            stmt.bindLong(9, dateTo.getTime());
        }
 
        String cenaZaEnergieCzynna = entity.getCenaZaEnergieCzynna();
        if (cenaZaEnergieCzynna != null) {
            stmt.bindString(10, cenaZaEnergieCzynna);
        }
 
        String cenaSkladnikJakosciowy = entity.getCenaSkladnikJakosciowy();
        if (cenaSkladnikJakosciowy != null) {
            stmt.bindString(11, cenaSkladnikJakosciowy);
        }
 
        String cenaOplataSieciowa = entity.getCenaOplataSieciowa();
        if (cenaOplataSieciowa != null) {
            stmt.bindString(12, cenaOplataSieciowa);
        }
 
        String cenaOplataPrzejsciowa = entity.getCenaOplataPrzejsciowa();
        if (cenaOplataPrzejsciowa != null) {
            stmt.bindString(13, cenaOplataPrzejsciowa);
        }
 
        String cenaOplStalaZaPrzesyl = entity.getCenaOplStalaZaPrzesyl();
        if (cenaOplStalaZaPrzesyl != null) {
            stmt.bindString(14, cenaOplStalaZaPrzesyl);
        }
 
        String cenaOplataAbonamentowa = entity.getCenaOplataAbonamentowa();
        if (cenaOplataAbonamentowa != null) {
            stmt.bindString(15, cenaOplataAbonamentowa);
        }
 
        String cenaZaEnergieCzynnaDzien = entity.getCenaZaEnergieCzynnaDzien();
        if (cenaZaEnergieCzynnaDzien != null) {
            stmt.bindString(16, cenaZaEnergieCzynnaDzien);
        }
 
        String cenaZaEnergieCzynnaNoc = entity.getCenaZaEnergieCzynnaNoc();
        if (cenaZaEnergieCzynnaNoc != null) {
            stmt.bindString(17, cenaZaEnergieCzynnaNoc);
        }
 
        String cenaOplataSieciowaDzien = entity.getCenaOplataSieciowaDzien();
        if (cenaOplataSieciowaDzien != null) {
            stmt.bindString(18, cenaOplataSieciowaDzien);
        }
 
        String cenaOplataSieciowaNoc = entity.getCenaOplataSieciowaNoc();
        if (cenaOplataSieciowaNoc != null) {
            stmt.bindString(19, cenaOplataSieciowaNoc);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PgeBill readEntity(Cursor cursor, int offset) {
        PgeBill entity = new PgeBill( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // readingFrom
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // readingTo
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // readingDayFrom
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // readingDayTo
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // readingNightFrom
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // readingNightTo
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // dateFrom
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // dateTo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cenaZaEnergieCzynna
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // cenaSkladnikJakosciowy
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // cenaOplataSieciowa
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // cenaOplataPrzejsciowa
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // cenaOplStalaZaPrzesyl
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // cenaOplataAbonamentowa
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // cenaZaEnergieCzynnaDzien
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // cenaZaEnergieCzynnaNoc
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // cenaOplataSieciowaDzien
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // cenaOplataSieciowaNoc
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PgeBill entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setReadingFrom(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setReadingTo(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setReadingDayFrom(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setReadingDayTo(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setReadingNightFrom(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setReadingNightTo(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDateFrom(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setDateTo(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setCenaZaEnergieCzynna(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCenaSkladnikJakosciowy(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCenaOplataSieciowa(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCenaOplataPrzejsciowa(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCenaOplStalaZaPrzesyl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCenaOplataAbonamentowa(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCenaZaEnergieCzynnaDzien(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCenaZaEnergieCzynnaNoc(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCenaOplataSieciowaDzien(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCenaOplataSieciowaNoc(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PgeBill entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PgeBill entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
