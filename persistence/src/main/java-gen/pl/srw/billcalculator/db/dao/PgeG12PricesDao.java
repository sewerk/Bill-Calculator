package pl.srw.billcalculator.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pl.srw.billcalculator.db.PgeG12Prices;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PGE_G12_PRICES.
*/
public class PgeG12PricesDao extends AbstractDao<PgeG12Prices, Long> {

    public static final String TABLENAME = "PGE_G12_PRICES";

    /**
     * Properties of entity PgeG12Prices.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CenaZaEnergieCzynnaDzien = new Property(1, String.class, "cenaZaEnergieCzynnaDzien", false, "CENA_ZA_ENERGIE_CZYNNA_DZIEN");
        public final static Property CenaZaEnergieCzynnaNoc = new Property(2, String.class, "cenaZaEnergieCzynnaNoc", false, "CENA_ZA_ENERGIE_CZYNNA_NOC");
        public final static Property CenaSkladnikJakosciowy = new Property(3, String.class, "cenaSkladnikJakosciowy", false, "CENA_SKLADNIK_JAKOSCIOWY");
        public final static Property CenaOplataSieciowaDzien = new Property(4, String.class, "cenaOplataSieciowaDzien", false, "CENA_OPLATA_SIECIOWA_DZIEN");
        public final static Property CenaOplataSieciowaNoc = new Property(5, String.class, "cenaOplataSieciowaNoc", false, "CENA_OPLATA_SIECIOWA_NOC");
        public final static Property CenaOplataPrzejsciowa = new Property(6, String.class, "cenaOplataPrzejsciowa", false, "CENA_OPLATA_PRZEJSCIOWA");
        public final static Property CenaOplStalaZaPrzesyl = new Property(7, String.class, "cenaOplStalaZaPrzesyl", false, "CENA_OPL_STALA_ZA_PRZESYL");
        public final static Property CenaOplataAbonamentowa = new Property(8, String.class, "cenaOplataAbonamentowa", false, "CENA_OPLATA_ABONAMENTOWA");
    };


    public PgeG12PricesDao(DaoConfig config) {
        super(config);
    }
    
    public PgeG12PricesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PGE_G12_PRICES' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CENA_ZA_ENERGIE_CZYNNA_DZIEN' TEXT," + // 1: cenaZaEnergieCzynnaDzien
                "'CENA_ZA_ENERGIE_CZYNNA_NOC' TEXT," + // 2: cenaZaEnergieCzynnaNoc
                "'CENA_SKLADNIK_JAKOSCIOWY' TEXT," + // 3: cenaSkladnikJakosciowy
                "'CENA_OPLATA_SIECIOWA_DZIEN' TEXT," + // 4: cenaOplataSieciowaDzien
                "'CENA_OPLATA_SIECIOWA_NOC' TEXT," + // 5: cenaOplataSieciowaNoc
                "'CENA_OPLATA_PRZEJSCIOWA' TEXT," + // 6: cenaOplataPrzejsciowa
                "'CENA_OPL_STALA_ZA_PRZESYL' TEXT," + // 7: cenaOplStalaZaPrzesyl
                "'CENA_OPLATA_ABONAMENTOWA' TEXT);"); // 8: cenaOplataAbonamentowa
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PGE_G12_PRICES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PgeG12Prices entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cenaZaEnergieCzynnaDzien = entity.getCenaZaEnergieCzynnaDzien();
        if (cenaZaEnergieCzynnaDzien != null) {
            stmt.bindString(2, cenaZaEnergieCzynnaDzien);
        }
 
        String cenaZaEnergieCzynnaNoc = entity.getCenaZaEnergieCzynnaNoc();
        if (cenaZaEnergieCzynnaNoc != null) {
            stmt.bindString(3, cenaZaEnergieCzynnaNoc);
        }
 
        String cenaSkladnikJakosciowy = entity.getCenaSkladnikJakosciowy();
        if (cenaSkladnikJakosciowy != null) {
            stmt.bindString(4, cenaSkladnikJakosciowy);
        }
 
        String cenaOplataSieciowaDzien = entity.getCenaOplataSieciowaDzien();
        if (cenaOplataSieciowaDzien != null) {
            stmt.bindString(5, cenaOplataSieciowaDzien);
        }
 
        String cenaOplataSieciowaNoc = entity.getCenaOplataSieciowaNoc();
        if (cenaOplataSieciowaNoc != null) {
            stmt.bindString(6, cenaOplataSieciowaNoc);
        }
 
        String cenaOplataPrzejsciowa = entity.getCenaOplataPrzejsciowa();
        if (cenaOplataPrzejsciowa != null) {
            stmt.bindString(7, cenaOplataPrzejsciowa);
        }
 
        String cenaOplStalaZaPrzesyl = entity.getCenaOplStalaZaPrzesyl();
        if (cenaOplStalaZaPrzesyl != null) {
            stmt.bindString(8, cenaOplStalaZaPrzesyl);
        }
 
        String cenaOplataAbonamentowa = entity.getCenaOplataAbonamentowa();
        if (cenaOplataAbonamentowa != null) {
            stmt.bindString(9, cenaOplataAbonamentowa);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PgeG12Prices readEntity(Cursor cursor, int offset) {
        PgeG12Prices entity = new PgeG12Prices( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cenaZaEnergieCzynnaDzien
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cenaZaEnergieCzynnaNoc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cenaSkladnikJakosciowy
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cenaOplataSieciowaDzien
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cenaOplataSieciowaNoc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cenaOplataPrzejsciowa
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cenaOplStalaZaPrzesyl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // cenaOplataAbonamentowa
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PgeG12Prices entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCenaZaEnergieCzynnaDzien(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCenaZaEnergieCzynnaNoc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCenaSkladnikJakosciowy(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCenaOplataSieciowaDzien(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCenaOplataSieciowaNoc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCenaOplataPrzejsciowa(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCenaOplStalaZaPrzesyl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCenaOplataAbonamentowa(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PgeG12Prices entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PgeG12Prices entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
