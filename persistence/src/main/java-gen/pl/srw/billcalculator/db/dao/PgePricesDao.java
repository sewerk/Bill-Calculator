package pl.srw.billcalculator.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import pl.srw.billcalculator.db.PgePrices;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PGE_PRICES".
*/
@SuppressWarnings("ALL")
public class PgePricesDao extends AbstractDao<PgePrices, Long> {

    public static final String TABLENAME = "PGE_PRICES";

    /**
     * Properties of entity PgePrices.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ZaEnergieCzynna = new Property(1, String.class, "zaEnergieCzynna", false, "ZA_ENERGIE_CZYNNA");
        public final static Property SkladnikJakosciowy = new Property(2, String.class, "skladnikJakosciowy", false, "SKLADNIK_JAKOSCIOWY");
        public final static Property OplataSieciowa = new Property(3, String.class, "oplataSieciowa", false, "OPLATA_SIECIOWA");
        public final static Property OplataPrzejsciowa = new Property(4, String.class, "oplataPrzejsciowa", false, "OPLATA_PRZEJSCIOWA");
        public final static Property OplataStalaZaPrzesyl = new Property(5, String.class, "oplataStalaZaPrzesyl", false, "OPLATA_STALA_ZA_PRZESYL");
        public final static Property OplataAbonamentowa = new Property(6, String.class, "oplataAbonamentowa", false, "OPLATA_ABONAMENTOWA");
        public final static Property OplataHandlowa = new Property(7, String.class, "oplataHandlowa", false, "OPLATA_HANDLOWA");
        public final static Property ZaEnergieCzynnaDzien = new Property(8, String.class, "zaEnergieCzynnaDzien", false, "ZA_ENERGIE_CZYNNA_DZIEN");
        public final static Property ZaEnergieCzynnaNoc = new Property(9, String.class, "zaEnergieCzynnaNoc", false, "ZA_ENERGIE_CZYNNA_NOC");
        public final static Property OplataSieciowaDzien = new Property(10, String.class, "oplataSieciowaDzien", false, "OPLATA_SIECIOWA_DZIEN");
        public final static Property OplataSieciowaNoc = new Property(11, String.class, "oplataSieciowaNoc", false, "OPLATA_SIECIOWA_NOC");
        public final static Property OplataOze = new Property(12, String.class, "oplataOze", false, "OPLATA_OZE");
    }


    public PgePricesDao(DaoConfig config) {
        super(config);
    }
    
    public PgePricesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PGE_PRICES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ZA_ENERGIE_CZYNNA\" TEXT," + // 1: zaEnergieCzynna
                "\"SKLADNIK_JAKOSCIOWY\" TEXT," + // 2: skladnikJakosciowy
                "\"OPLATA_SIECIOWA\" TEXT," + // 3: oplataSieciowa
                "\"OPLATA_PRZEJSCIOWA\" TEXT," + // 4: oplataPrzejsciowa
                "\"OPLATA_STALA_ZA_PRZESYL\" TEXT," + // 5: oplataStalaZaPrzesyl
                "\"OPLATA_ABONAMENTOWA\" TEXT," + // 6: oplataAbonamentowa
                "\"OPLATA_HANDLOWA\" TEXT," + // 7: oplataHandlowa
                "\"ZA_ENERGIE_CZYNNA_DZIEN\" TEXT," + // 8: zaEnergieCzynnaDzien
                "\"ZA_ENERGIE_CZYNNA_NOC\" TEXT," + // 9: zaEnergieCzynnaNoc
                "\"OPLATA_SIECIOWA_DZIEN\" TEXT," + // 10: oplataSieciowaDzien
                "\"OPLATA_SIECIOWA_NOC\" TEXT," + // 11: oplataSieciowaNoc
                "\"OPLATA_OZE\" TEXT);"); // 12: oplataOze
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PGE_PRICES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PgePrices entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String zaEnergieCzynna = entity.getZaEnergieCzynna();
        if (zaEnergieCzynna != null) {
            stmt.bindString(2, zaEnergieCzynna);
        }
 
        String skladnikJakosciowy = entity.getSkladnikJakosciowy();
        if (skladnikJakosciowy != null) {
            stmt.bindString(3, skladnikJakosciowy);
        }
 
        String oplataSieciowa = entity.getOplataSieciowa();
        if (oplataSieciowa != null) {
            stmt.bindString(4, oplataSieciowa);
        }
 
        String oplataPrzejsciowa = entity.getOplataPrzejsciowa();
        if (oplataPrzejsciowa != null) {
            stmt.bindString(5, oplataPrzejsciowa);
        }
 
        String oplataStalaZaPrzesyl = entity.getOplataStalaZaPrzesyl();
        if (oplataStalaZaPrzesyl != null) {
            stmt.bindString(6, oplataStalaZaPrzesyl);
        }
 
        String oplataAbonamentowa = entity.getOplataAbonamentowa();
        if (oplataAbonamentowa != null) {
            stmt.bindString(7, oplataAbonamentowa);
        }
 
        String oplataHandlowa = entity.getOplataHandlowa();
        if (oplataHandlowa != null) {
            stmt.bindString(8, oplataHandlowa);
        }
 
        String zaEnergieCzynnaDzien = entity.getZaEnergieCzynnaDzien();
        if (zaEnergieCzynnaDzien != null) {
            stmt.bindString(9, zaEnergieCzynnaDzien);
        }
 
        String zaEnergieCzynnaNoc = entity.getZaEnergieCzynnaNoc();
        if (zaEnergieCzynnaNoc != null) {
            stmt.bindString(10, zaEnergieCzynnaNoc);
        }
 
        String oplataSieciowaDzien = entity.getOplataSieciowaDzien();
        if (oplataSieciowaDzien != null) {
            stmt.bindString(11, oplataSieciowaDzien);
        }
 
        String oplataSieciowaNoc = entity.getOplataSieciowaNoc();
        if (oplataSieciowaNoc != null) {
            stmt.bindString(12, oplataSieciowaNoc);
        }
 
        String oplataOze = entity.getOplataOze();
        if (oplataOze != null) {
            stmt.bindString(13, oplataOze);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PgePrices entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String zaEnergieCzynna = entity.getZaEnergieCzynna();
        if (zaEnergieCzynna != null) {
            stmt.bindString(2, zaEnergieCzynna);
        }
 
        String skladnikJakosciowy = entity.getSkladnikJakosciowy();
        if (skladnikJakosciowy != null) {
            stmt.bindString(3, skladnikJakosciowy);
        }
 
        String oplataSieciowa = entity.getOplataSieciowa();
        if (oplataSieciowa != null) {
            stmt.bindString(4, oplataSieciowa);
        }
 
        String oplataPrzejsciowa = entity.getOplataPrzejsciowa();
        if (oplataPrzejsciowa != null) {
            stmt.bindString(5, oplataPrzejsciowa);
        }
 
        String oplataStalaZaPrzesyl = entity.getOplataStalaZaPrzesyl();
        if (oplataStalaZaPrzesyl != null) {
            stmt.bindString(6, oplataStalaZaPrzesyl);
        }
 
        String oplataAbonamentowa = entity.getOplataAbonamentowa();
        if (oplataAbonamentowa != null) {
            stmt.bindString(7, oplataAbonamentowa);
        }
 
        String oplataHandlowa = entity.getOplataHandlowa();
        if (oplataHandlowa != null) {
            stmt.bindString(8, oplataHandlowa);
        }
 
        String zaEnergieCzynnaDzien = entity.getZaEnergieCzynnaDzien();
        if (zaEnergieCzynnaDzien != null) {
            stmt.bindString(9, zaEnergieCzynnaDzien);
        }
 
        String zaEnergieCzynnaNoc = entity.getZaEnergieCzynnaNoc();
        if (zaEnergieCzynnaNoc != null) {
            stmt.bindString(10, zaEnergieCzynnaNoc);
        }
 
        String oplataSieciowaDzien = entity.getOplataSieciowaDzien();
        if (oplataSieciowaDzien != null) {
            stmt.bindString(11, oplataSieciowaDzien);
        }
 
        String oplataSieciowaNoc = entity.getOplataSieciowaNoc();
        if (oplataSieciowaNoc != null) {
            stmt.bindString(12, oplataSieciowaNoc);
        }
 
        String oplataOze = entity.getOplataOze();
        if (oplataOze != null) {
            stmt.bindString(13, oplataOze);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PgePrices readEntity(Cursor cursor, int offset) {
        PgePrices entity = new PgePrices( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // zaEnergieCzynna
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // skladnikJakosciowy
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // oplataSieciowa
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // oplataPrzejsciowa
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // oplataStalaZaPrzesyl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // oplataAbonamentowa
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // oplataHandlowa
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // zaEnergieCzynnaDzien
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // zaEnergieCzynnaNoc
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // oplataSieciowaDzien
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // oplataSieciowaNoc
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // oplataOze
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PgePrices entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setZaEnergieCzynna(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSkladnikJakosciowy(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOplataSieciowa(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOplataPrzejsciowa(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOplataStalaZaPrzesyl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOplataAbonamentowa(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOplataHandlowa(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZaEnergieCzynnaDzien(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setZaEnergieCzynnaNoc(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOplataSieciowaDzien(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOplataSieciowaNoc(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOplataOze(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PgePrices entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PgePrices entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PgePrices entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
