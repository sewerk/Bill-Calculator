package pl.srw.billcalculator.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pl.srw.billcalculator.db.TauronPrices;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TAURON_PRICES.
*/
@SuppressWarnings("ALL")
public class TauronPricesDao extends AbstractDao<TauronPrices, Long> {

    public static final String TABLENAME = "TAURON_PRICES";

    /**
     * Properties of entity TauronPrices.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EnergiaElektrycznaCzynna = new Property(1, String.class, "energiaElektrycznaCzynna", false, "ENERGIA_ELEKTRYCZNA_CZYNNA");
        public final static Property OplataDystrybucyjnaZmienna = new Property(2, String.class, "oplataDystrybucyjnaZmienna", false, "OPLATA_DYSTRYBUCYJNA_ZMIENNA");
        public final static Property OplataDystrybucyjnaStala = new Property(3, String.class, "oplataDystrybucyjnaStala", false, "OPLATA_DYSTRYBUCYJNA_STALA");
        public final static Property OplataPrzejsciowa = new Property(4, String.class, "oplataPrzejsciowa", false, "OPLATA_PRZEJSCIOWA");
        public final static Property OplataAbonamentowa = new Property(5, String.class, "oplataAbonamentowa", false, "OPLATA_ABONAMENTOWA");
        public final static Property EnergiaElektrycznaCzynnaDzien = new Property(6, String.class, "energiaElektrycznaCzynnaDzien", false, "ENERGIA_ELEKTRYCZNA_CZYNNA_DZIEN");
        public final static Property EnergiaElektrycznaCzynnaNoc = new Property(7, String.class, "energiaElektrycznaCzynnaNoc", false, "ENERGIA_ELEKTRYCZNA_CZYNNA_NOC");
        public final static Property OplataDystrybucyjnaZmiennaDzien = new Property(8, String.class, "oplataDystrybucyjnaZmiennaDzien", false, "OPLATA_DYSTRYBUCYJNA_ZMIENNA_DZIEN");
        public final static Property OplataDystrybucyjnaZmiennaNoc = new Property(9, String.class, "oplataDystrybucyjnaZmiennaNoc", false, "OPLATA_DYSTRYBUCYJNA_ZMIENNA_NOC");
        public final static Property OplataOze = new Property(10, String.class, "oplataOze", false, "OPLATA_OZE");
    };


    public TauronPricesDao(DaoConfig config) {
        super(config);
    }
    
    public TauronPricesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TAURON_PRICES' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ENERGIA_ELEKTRYCZNA_CZYNNA' TEXT," + // 1: energiaElektrycznaCzynna
                "'OPLATA_DYSTRYBUCYJNA_ZMIENNA' TEXT," + // 2: oplataDystrybucyjnaZmienna
                "'OPLATA_DYSTRYBUCYJNA_STALA' TEXT," + // 3: oplataDystrybucyjnaStala
                "'OPLATA_PRZEJSCIOWA' TEXT," + // 4: oplataPrzejsciowa
                "'OPLATA_ABONAMENTOWA' TEXT," + // 5: oplataAbonamentowa
                "'ENERGIA_ELEKTRYCZNA_CZYNNA_DZIEN' TEXT," + // 6: energiaElektrycznaCzynnaDzien
                "'ENERGIA_ELEKTRYCZNA_CZYNNA_NOC' TEXT," + // 7: energiaElektrycznaCzynnaNoc
                "'OPLATA_DYSTRYBUCYJNA_ZMIENNA_DZIEN' TEXT," + // 8: oplataDystrybucyjnaZmiennaDzien
                "'OPLATA_DYSTRYBUCYJNA_ZMIENNA_NOC' TEXT," + // 9: oplataDystrybucyjnaZmiennaNoc
                "'OPLATA_OZE' TEXT);"); // 10: oplataOze
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TAURON_PRICES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TauronPrices entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String energiaElektrycznaCzynna = entity.getEnergiaElektrycznaCzynna();
        if (energiaElektrycznaCzynna != null) {
            stmt.bindString(2, energiaElektrycznaCzynna);
        }
 
        String oplataDystrybucyjnaZmienna = entity.getOplataDystrybucyjnaZmienna();
        if (oplataDystrybucyjnaZmienna != null) {
            stmt.bindString(3, oplataDystrybucyjnaZmienna);
        }
 
        String oplataDystrybucyjnaStala = entity.getOplataDystrybucyjnaStala();
        if (oplataDystrybucyjnaStala != null) {
            stmt.bindString(4, oplataDystrybucyjnaStala);
        }
 
        String oplataPrzejsciowa = entity.getOplataPrzejsciowa();
        if (oplataPrzejsciowa != null) {
            stmt.bindString(5, oplataPrzejsciowa);
        }
 
        String oplataAbonamentowa = entity.getOplataAbonamentowa();
        if (oplataAbonamentowa != null) {
            stmt.bindString(6, oplataAbonamentowa);
        }
 
        String energiaElektrycznaCzynnaDzien = entity.getEnergiaElektrycznaCzynnaDzien();
        if (energiaElektrycznaCzynnaDzien != null) {
            stmt.bindString(7, energiaElektrycznaCzynnaDzien);
        }
 
        String energiaElektrycznaCzynnaNoc = entity.getEnergiaElektrycznaCzynnaNoc();
        if (energiaElektrycznaCzynnaNoc != null) {
            stmt.bindString(8, energiaElektrycznaCzynnaNoc);
        }
 
        String oplataDystrybucyjnaZmiennaDzien = entity.getOplataDystrybucyjnaZmiennaDzien();
        if (oplataDystrybucyjnaZmiennaDzien != null) {
            stmt.bindString(9, oplataDystrybucyjnaZmiennaDzien);
        }
 
        String oplataDystrybucyjnaZmiennaNoc = entity.getOplataDystrybucyjnaZmiennaNoc();
        if (oplataDystrybucyjnaZmiennaNoc != null) {
            stmt.bindString(10, oplataDystrybucyjnaZmiennaNoc);
        }
 
        String oplataOze = entity.getOplataOze();
        if (oplataOze != null) {
            stmt.bindString(11, oplataOze);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TauronPrices readEntity(Cursor cursor, int offset) {
        TauronPrices entity = new TauronPrices( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // energiaElektrycznaCzynna
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // oplataDystrybucyjnaZmienna
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // oplataDystrybucyjnaStala
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // oplataPrzejsciowa
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // oplataAbonamentowa
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // energiaElektrycznaCzynnaDzien
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // energiaElektrycznaCzynnaNoc
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // oplataDystrybucyjnaZmiennaDzien
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // oplataDystrybucyjnaZmiennaNoc
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // oplataOze
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TauronPrices entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEnergiaElektrycznaCzynna(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOplataDystrybucyjnaZmienna(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOplataDystrybucyjnaStala(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOplataPrzejsciowa(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOplataAbonamentowa(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEnergiaElektrycznaCzynnaDzien(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEnergiaElektrycznaCzynnaNoc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOplataDystrybucyjnaZmiennaDzien(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOplataDystrybucyjnaZmiennaNoc(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOplataOze(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TauronPrices entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TauronPrices entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
